basePath: /
definitions:
  main.Achievement:
    properties:
      description:
        type: string
      title:
        type: string
    type: object
  main.Profile:
    properties:
      achievements:
        items:
          $ref: '#/definitions/main.Achievement'
        type: array
      bio:
        type: string
      image:
        type: string
      name:
        type: string
      philosophy:
        type: string
      socialLinks:
        items:
          $ref: '#/definitions/main.Social'
        type: array
    type: object
  main.Social:
    properties:
      icon:
        type: string
      name:
        type: string
      url:
        type: string
    type: object
  main.User:
    properties:
      avatar:
        type: string
      profile:
        $ref: '#/definitions/main.Profile'
      username:
        type: string
    type: object
host: pipebomb.bytecats.codes
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.anij.bytecats.codes/support
  description: This is a simple API for managing user profiles.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://anij.bytecats.codes/tos/
  title: User Profile API
  version: "1.0"
paths:
  /users:
    get:
      description: Retrieve a list of all users
      operationId: get-users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/main.User'
            type: array
      summary: Get all users
    post:
      consumes:
      - application/json
      description: Create a new user with the given data
      operationId: create-user
      parameters:
      - description: User to be created
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/main.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/main.User'
      summary: Create a new user
  /users/{username}:
    delete:
      description: Delete a user by their username
      operationId: delete-user
      parameters:
      - description: Username of the user to be deleted
        in: path
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/main.User'
        "404":
          description: User not found
      summary: Delete a user
    get:
      description: Retrieve a user by their username
      operationId: get-user
      parameters:
      - description: Username of the user to be fetched
        in: path
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/main.User'
        "404":
          description: User not found
      summary: Get a specific user
    put:
      consumes:
      - application/json
      description: Update a user's data by their username
      operationId: update-user
      parameters:
      - description: Username of the user to be updated
        in: path
        name: username
        required: true
        type: string
      - description: Updated user data
        in: body
        name: updatedUser
        required: true
        schema:
          $ref: '#/definitions/main.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/main.User'
        "404":
          description: User not found
      summary: Update a user
schemes:
- https
swagger: "2.0"
